import asyncio
from datetime import datetime, timezone

import validators
from asyncio import sleep
import discord

from bot.config import FFMPEG_OPT, INACTIVITY_TIMEOUT
from searcher import search_track, get_first_tracks_from_playlist, search_playlist


def update_last_activity(method=None):
    def decorator(func):
        async def wrapper(*args, **kwargs):
            self = args[0]
            if isinstance(self, Player):
                self.last_activity = datetime.now(timezone.utc)
            return await func(*args, **kwargs)

        if method:
            return wrapper
        return wrapper()

    if callable(method):
        return decorator(method)
    return decorator


class Player:
    """
    –ö–ª–∞—Å—Å Player –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º –º—É–∑—ã–∫–∏ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ Discord.

    –ê—Ç—Ä–∏–±—É—Ç—ã:
    - ctx: –ö–æ–Ω—Ç–µ–∫—Å—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Player.
    - bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.
    - voice_client: –ö–ª–∏–µ–Ω—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ Discord.
    - is_playing: –õ–æ–≥–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–æ–≥–æ, –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ª–∏ —Ç—Ä–µ–∫ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.
    - current_track: –¢–µ–∫—É—â–∏–π –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º—ã–π —Ç—Ä–µ–∫.
    - current_playlist: –¢–µ–∫—É—â–∏–π –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º—ã–π –ø–ª–µ–π–ª–∏—Å—Ç.
    - queue: –û—á–µ—Ä–µ–¥—å —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è.
    - playlist_loading: –õ–æ–≥–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–æ–≥–æ, –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.
    - last_activity: –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ UTC.
    - inactivity_task: –ó–∞–¥–∞—á–∞, –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—â–∞—è –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞.
    """

    def __init__(self, ctx):
        self.ctx = ctx
        self.bot = ctx.bot
        self.voice_client = None
        self.is_playing = False
        self.current_track = None
        self.playlists = []
        self.queue = []
        self.playlist_loading = False
        self.last_activity = datetime.now(timezone.utc)
        self.inactivity_task = asyncio.create_task(self.check_inactivity())

    def update_ctx(self, ctx):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç."""
        self.ctx = ctx

    @update_last_activity
    async def handle_query(self, query):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω —Ç—Ä–µ–∫–æ–º –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç–æ–º,
        –≤—ã–∑—ã–≤–∞—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é.

        Parameters:
        - query: –ó–∞–ø—Ä–æ—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.
        """
        if self.playlist_loading:
            return await self.ctx.send(
                "```‚è≥ –ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...```")
        if validators.url(query) and ('?list=' in query or '/playlists/' in query):
            return await self.add_playlist_to_queue(query)
        return await self.add_track_to_queue(query)

    async def check_inactivity(self):
        while True:
            await sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
            if self.voice_client and self.voice_client.is_connected() and not self.voice_client.is_playing():
                if datetime.now(timezone.utc) - self.last_activity > INACTIVITY_TIMEOUT:
                    await self.voice_client.disconnect()
                    await self.ctx.send("```üí§ –ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.```")
                    break

    async def connect(self):
        """
        –ü–æ–¥–∫–ª—é—á–∞–µ—Ç –±–æ—Ç–∞ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã–∑–≤–∞–≤—à–µ–≥–æ –∫–æ–º–∞–Ω–¥—É.

        Returns:
        - True, –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω—ã–º, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
        """
        try:
            voice_channel = self.ctx.author.voice.channel
        except AttributeError:
            await self.ctx.send("```‚ùå –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!```")
            return False
        if self.voice_client and self.voice_client.is_connected():
            if self.voice_client.channel != voice_channel:
                await self.voice_client.move_to(voice_channel)
            return True
        self.voice_client = await voice_channel.connect(self_deaf=True)
        return True

    @update_last_activity
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–∞–µ—Ç –±–æ—Ç–∞ –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏ –æ—á–∏—â–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å."""
        if self.voice_client and self.voice_client.is_connected():
            await self.clear_queue()
            await self.voice_client.disconnect()
            await self.ctx.send("```üíî –û—Ç–∫–ª—é—á–µ–Ω–æ```")

    @update_last_activity
    async def add_track_to_queue(self, query):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Ç—Ä–µ–∫ –≤ –æ—á–µ—Ä–µ–¥—å.

        Parameters:
        - query: –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–ª–∏ URL —Ç—Ä–µ–∫–∞.
        """
        if await self.connect():
            track = await search_track(self, query)
            if not track:
                return await self.ctx.send("```üîç –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.```")
            self.queue.append(track)
            await self.ctx.send(f'```üì• –î–æ–±–∞–≤–ª–µ–Ω–æ {track.title}```')
            if not self.voice_client.is_playing():
                await self.play_track()

    @update_last_activity
    async def add_playlist_to_queue(self, query):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç –≤ –æ—á–µ—Ä–µ–¥—å.

        Parameters:
        - query: URL –ø–ª–µ–π–ª–∏—Å—Ç–∞.
        """
        if await self.connect():
            upload_text = await self.ctx.send("```‚ôªÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...```")
            self.playlist_loading = True
            first_tracks = await get_first_tracks_from_playlist(self, query)
            if first_tracks:
                self.queue.extend(first_tracks)
                await self.play_track()
            playlist = await search_playlist(self, query)
            self.playlist_loading = False
            await upload_text.delete()
            if not playlist:
                return await self.ctx.send("```‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø—É—Å—Ç–æ–π –ø–ª–µ–π–ª–∏—Å—Ç.```")
            self.queue.extend(playlist[len(first_tracks):])
            self.playlists.append(query)
            await self.ctx.send(f'```üì• –î–æ–±–∞–≤–ª–µ–Ω–æ {len(playlist) - 1} —Ç—Ä–µ–∫–æ–≤ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥—å.```')

            if not self.voice_client.is_playing():
                await self.play_track()

    @update_last_activity
    async def play_track(self):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ –≤ –æ—á–µ—Ä–µ–¥–∏."""
        if not self.voice_client or not self.voice_client.is_connected() or self.voice_client.is_playing():
            return
        self.current_track = self.queue.pop(0)
        self.voice_client.play(
            discord.FFmpegPCMAudio(self.current_track.source, **FFMPEG_OPT),
            after=lambda e: self.bot.loop.create_task(self.play_track()) if self.queue else None)

    @update_last_activity
    async def show_queue(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å."""
        if self.playlist_loading:
            return await self.ctx.send(
                "```‚è≥ –ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...```")
        if not self.queue:
            await self.ctx.send("```üì≠ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.```")
        else:
            text_queue = [f"{i + 1}) {str(track)}" for i, track in enumerate(self.queue)]
            chunks = [text_queue[i:i + 30] for i in range(0, len(text_queue), 30)]

            for i, chunk in enumerate(chunks):
                chunk_text = "\n".join(chunk)
                if i == 0:
                    await self.ctx.send(f"**–¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å:**\n```{chunk_text}```")
                else:
                    await self.ctx.send(f"```{chunk_text}```")

    @update_last_activity
    async def clear_queue(self):
        """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å."""
        if self.playlist_loading:
            return await self.ctx.send(
                "```‚è≥ –ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...```")
        if not self.queue:
            await self.ctx.send("```üì≠ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.```")
        else:
            self.queue.clear()
            await self.ctx.send("```‚ú® –û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞.```")

    @update_last_activity
    async def skip(self):
        """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º—ã–π —Ç—Ä–µ–∫."""
        if not (self.voice_client and self.voice_client.is_playing()):
            return
        if self.playlist_loading:
            return await self.ctx.send(
                "```‚è≥ –ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...```")
        self.voice_client.stop()
        await self.ctx.send('```‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ```')
        if self.queue and not self.voice_client.is_playing():
            await self.play_track()

    @update_last_activity
    async def skip_playlist(self):
        """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º—ã–π –ø–ª–µ–π–ª–∏—Å—Ç."""
        if not (self.voice_client and self.voice_client.is_playing()):
            return
        if self.playlist_loading:
            return await self.ctx.send(
                "```‚è≥ –ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...```")
        if not self.playlists:
            await self.ctx.send("```‚ö†Ô∏è –¢–µ–∫—É—â–∏–π –ø–ª–µ–π–ª–∏—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.```")
            return
        current_playlist = self.playlists.pop(0)
        self.queue = [track for track in self.queue if track.playlist != current_playlist]
        await self.ctx.send(f"```‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω —Ç–µ–∫—É—â–∏–π –ø–ª–µ–π–ª–∏—Å—Ç.```")

    @update_last_activity
    async def pause(self):
        """–ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–ª–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞."""
        if self.voice_client.is_playing():
            self.voice_client.pause()
            await self.ctx.send('```‚è∏Ô∏è –ü–∞—É–∑–∞```')
        elif self.voice_client.is_paused():
            self.voice_client.resume()
            await self.ctx.send("```üîä –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ```")
